
Flipdot-lib.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000134  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000c0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000024  00800100  00800100  00000134  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000134  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000164  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  000001a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000af0  00000000  00000000  0000021c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000074f  00000000  00000000  00000d0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000844  00000000  00000000  0000145b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b8  00000000  00000000  00001ca0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00007555  00000000  00000000  00001d58  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000056c  00000000  00000000  000092ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00009819  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000023d8  00000000  00000000  00009871  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	27 c0       	rjmp	.+78     	; 0x54 <__bad_interrupt>
   6:	26 c0       	rjmp	.+76     	; 0x54 <__bad_interrupt>
   8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
   a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>
  1e:	1a c0       	rjmp	.+52     	; 0x54 <__bad_interrupt>
  20:	19 c0       	rjmp	.+50     	; 0x54 <__bad_interrupt>
  22:	18 c0       	rjmp	.+48     	; 0x54 <__bad_interrupt>
  24:	17 c0       	rjmp	.+46     	; 0x54 <__bad_interrupt>
  26:	16 c0       	rjmp	.+44     	; 0x54 <__bad_interrupt>
  28:	15 c0       	rjmp	.+42     	; 0x54 <__bad_interrupt>
  2a:	14 c0       	rjmp	.+40     	; 0x54 <__bad_interrupt>
  2c:	13 c0       	rjmp	.+38     	; 0x54 <__bad_interrupt>
  2e:	12 c0       	rjmp	.+36     	; 0x54 <__bad_interrupt>
  30:	11 c0       	rjmp	.+34     	; 0x54 <__bad_interrupt>
  32:	10 c0       	rjmp	.+32     	; 0x54 <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d2 e0       	ldi	r29, 0x02	; 2
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_clear_bss>:
  40:	21 e0       	ldi	r18, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	a4 32       	cpi	r26, 0x24	; 36
  4c:	b2 07       	cpc	r27, r18
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	33 d0       	rcall	.+102    	; 0xb8 <main>
  52:	34 c0       	rjmp	.+104    	; 0xbc <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <Flipdot_clearBuffer>:
void Flipdot_setBuffer (uint8_t x, uint8_t y, uint8_t state){
  if(x < XMAX && y < YMAX && state <= 1){
	  if(state == 1){
		  f_buffer[x] |= (1<<y);
	  }else if(state == 0){
		  f_buffer[x] &= ~(1<<y);
  56:	80 e0       	ldi	r24, 0x00	; 0
  58:	06 c0       	rjmp	.+12     	; 0x66 <Flipdot_clearBuffer+0x10>
  5a:	e8 2f       	mov	r30, r24
  5c:	f0 e0       	ldi	r31, 0x00	; 0
  5e:	e4 5f       	subi	r30, 0xF4	; 244
  60:	fe 4f       	sbci	r31, 0xFE	; 254
  62:	10 82       	st	Z, r1
  64:	8f 5f       	subi	r24, 0xFF	; 255
  66:	88 31       	cpi	r24, 0x18	; 24
  68:	c0 f3       	brcs	.-16     	; 0x5a <Flipdot_clearBuffer+0x4>
  6a:	08 95       	ret

0000006c <Flipdot_init>:
}

void Flipdot_init (void){
	//	I/O pins		NAME			NAME ON BOARD
	
	setBit(DDRB,0);		//A					MCU 2
  6c:	84 b1       	in	r24, 0x04	; 4
  6e:	81 60       	ori	r24, 0x01	; 1
  70:	84 b9       	out	0x04, r24	; 4
	setBit(DDRB,1);		//B					MCU 3
  72:	84 b1       	in	r24, 0x04	; 4
  74:	82 60       	ori	r24, 0x02	; 2
  76:	84 b9       	out	0x04, r24	; 4
	setBit(DDRB,2);		//C					MCU 4
  78:	84 b1       	in	r24, 0x04	; 4
  7a:	84 60       	ori	r24, 0x04	; 4
  7c:	84 b9       	out	0x04, r24	; 4
	setBit(DDRB,3);		//Row A				MCU 8
  7e:	84 b1       	in	r24, 0x04	; 4
  80:	88 60       	ori	r24, 0x08	; 8
  82:	84 b9       	out	0x04, r24	; 4
	setBit(DDRB,4);		//Row B				MCU 9
  84:	84 b1       	in	r24, 0x04	; 4
  86:	80 61       	ori	r24, 0x10	; 16
  88:	84 b9       	out	0x04, r24	; 4
	setBit(DDRB,5);		//Row C				MCU 10
  8a:	84 b1       	in	r24, 0x04	; 4
  8c:	80 62       	ori	r24, 0x20	; 32
  8e:	84 b9       	out	0x04, r24	; 4
	setBit(DDRB,6);		//Subsegment A		MCU 5
  90:	84 b1       	in	r24, 0x04	; 4
  92:	80 64       	ori	r24, 0x40	; 64
  94:	84 b9       	out	0x04, r24	; 4
	setBit(DDRB,7);		//Subsegment B		MCU 6
  96:	84 b1       	in	r24, 0x04	; 4
  98:	80 68       	ori	r24, 0x80	; 128
  9a:	84 b9       	out	0x04, r24	; 4
	setBit(DDRD,0);		//Subsegment C		MCU 7
  9c:	8a b1       	in	r24, 0x0a	; 10
  9e:	81 60       	ori	r24, 0x01	; 1
  a0:	8a b9       	out	0x0a, r24	; 10
	setBit(DDRD,1);		//Segment A			Internal
  a2:	8a b1       	in	r24, 0x0a	; 10
  a4:	82 60       	ori	r24, 0x02	; 2
  a6:	8a b9       	out	0x0a, r24	; 10
	setBit(DDRD,2);		//Segment B			Internal
  a8:	8a b1       	in	r24, 0x0a	; 10
  aa:	84 60       	ori	r24, 0x04	; 4
  ac:	8a b9       	out	0x0a, r24	; 10
	setBit(DDRD,3);		//Segment C			Internal
  ae:	8a b1       	in	r24, 0x0a	; 10
  b0:	88 60       	ori	r24, 0x08	; 8
  b2:	8a b9       	out	0x0a, r24	; 10
	
	Flipdot_clearBuffer();
  b4:	d0 df       	rcall	.-96     	; 0x56 <Flipdot_clearBuffer>
  b6:	08 95       	ret

000000b8 <main>:
#include "Flipdot.h"

int main(void){
	Flipdot_init();
  b8:	d9 df       	rcall	.-78     	; 0x6c <Flipdot_init>
  ba:	ff cf       	rjmp	.-2      	; 0xba <main+0x2>

000000bc <_exit>:
  bc:	f8 94       	cli

000000be <__stop_program>:
  be:	ff cf       	rjmp	.-2      	; 0xbe <__stop_program>
