
Flipdot-lib.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000013e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000ca  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000025  00800100  00800100  0000013e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000013e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000170  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  000001b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008d4  00000000  00000000  00000200  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000700  00000000  00000000  00000ad4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000064c  00000000  00000000  000011d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000068  00000000  00000000  00001820  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000785b  00000000  00000000  00001888  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000025  00000000  00000000  000090e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00009108  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00002558  00000000  00000000  00009138  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	27 c0       	rjmp	.+78     	; 0x54 <__bad_interrupt>
   6:	26 c0       	rjmp	.+76     	; 0x54 <__bad_interrupt>
   8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
   a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>
  1e:	1a c0       	rjmp	.+52     	; 0x54 <__bad_interrupt>
  20:	19 c0       	rjmp	.+50     	; 0x54 <__bad_interrupt>
  22:	18 c0       	rjmp	.+48     	; 0x54 <__bad_interrupt>
  24:	17 c0       	rjmp	.+46     	; 0x54 <__bad_interrupt>
  26:	16 c0       	rjmp	.+44     	; 0x54 <__bad_interrupt>
  28:	15 c0       	rjmp	.+42     	; 0x54 <__bad_interrupt>
  2a:	14 c0       	rjmp	.+40     	; 0x54 <__bad_interrupt>
  2c:	13 c0       	rjmp	.+38     	; 0x54 <__bad_interrupt>
  2e:	12 c0       	rjmp	.+36     	; 0x54 <__bad_interrupt>
  30:	11 c0       	rjmp	.+34     	; 0x54 <__bad_interrupt>
  32:	10 c0       	rjmp	.+32     	; 0x54 <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d2 e0       	ldi	r29, 0x02	; 2
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_clear_bss>:
  40:	21 e0       	ldi	r18, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	a5 32       	cpi	r26, 0x25	; 37
  4c:	b2 07       	cpc	r27, r18
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	38 d0       	rcall	.+112    	; 0xc2 <main>
  52:	39 c0       	rjmp	.+114    	; 0xc6 <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <Flipdot_clearBuffer>:
		f_write_delay = DEFAULT_DELAY;
	}
}

void Flipdot_clearBuffer (void){
	for(i=0;i<24;i++){
  56:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <i>
  5a:	08 c0       	rjmp	.+16     	; 0x6c <Flipdot_clearBuffer+0x16>
		f_buffer[i] = 0;
  5c:	e8 2f       	mov	r30, r24
  5e:	f0 e0       	ldi	r31, 0x00	; 0
  60:	e3 5f       	subi	r30, 0xF3	; 243
  62:	fe 4f       	sbci	r31, 0xFE	; 254
  64:	10 82       	st	Z, r1
		f_write_delay = DEFAULT_DELAY;
	}
}

void Flipdot_clearBuffer (void){
	for(i=0;i<24;i++){
  66:	8f 5f       	subi	r24, 0xFF	; 255
  68:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <i>
  6c:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <i>
  70:	88 31       	cpi	r24, 0x18	; 24
  72:	a0 f3       	brcs	.-24     	; 0x5c <Flipdot_clearBuffer+0x6>
		f_buffer[i] = 0;
	}
}
  74:	08 95       	ret

00000076 <Flipdot_init>:

void Flipdot_init (void){
	//	I/O pins		NAME			NAME ON BOARD
	
	DDRB |= (1<<0);		//A					MCU 2
  76:	84 b1       	in	r24, 0x04	; 4
  78:	81 60       	ori	r24, 0x01	; 1
  7a:	84 b9       	out	0x04, r24	; 4
	DDRB |= (1<<1);		//B					MCU 3
  7c:	84 b1       	in	r24, 0x04	; 4
  7e:	82 60       	ori	r24, 0x02	; 2
  80:	84 b9       	out	0x04, r24	; 4
	DDRB |= (1<<2);		//C					MCU 4
  82:	84 b1       	in	r24, 0x04	; 4
  84:	84 60       	ori	r24, 0x04	; 4
  86:	84 b9       	out	0x04, r24	; 4
	DDRB |= (1<<3);		//Row A				MCU 8
  88:	84 b1       	in	r24, 0x04	; 4
  8a:	88 60       	ori	r24, 0x08	; 8
  8c:	84 b9       	out	0x04, r24	; 4
	DDRB |= (1<<4);		//Row B				MCU 9
  8e:	84 b1       	in	r24, 0x04	; 4
  90:	80 61       	ori	r24, 0x10	; 16
  92:	84 b9       	out	0x04, r24	; 4
	DDRB |= (1<<5);		//Row C				MCU 10
  94:	84 b1       	in	r24, 0x04	; 4
  96:	80 62       	ori	r24, 0x20	; 32
  98:	84 b9       	out	0x04, r24	; 4
	DDRB |= (1<<6);		//Subsegment A		MCU 5
  9a:	84 b1       	in	r24, 0x04	; 4
  9c:	80 64       	ori	r24, 0x40	; 64
  9e:	84 b9       	out	0x04, r24	; 4
	DDRB |= (1<<7);		//Subsegment B		MCU 6
  a0:	84 b1       	in	r24, 0x04	; 4
  a2:	80 68       	ori	r24, 0x80	; 128
  a4:	84 b9       	out	0x04, r24	; 4
	DDRD |= (1<<0);		//Subsegment C		MCU 7
  a6:	8a b1       	in	r24, 0x0a	; 10
  a8:	81 60       	ori	r24, 0x01	; 1
  aa:	8a b9       	out	0x0a, r24	; 10
	DDRD |= (1<<1);		//Segment A			Internal
  ac:	8a b1       	in	r24, 0x0a	; 10
  ae:	82 60       	ori	r24, 0x02	; 2
  b0:	8a b9       	out	0x0a, r24	; 10
	DDRD |= (1<<2);		//Segment B			Internal
  b2:	8a b1       	in	r24, 0x0a	; 10
  b4:	84 60       	ori	r24, 0x04	; 4
  b6:	8a b9       	out	0x0a, r24	; 10
	DDRD |= (1<<3);		//Segment C			Internal
  b8:	8a b1       	in	r24, 0x0a	; 10
  ba:	88 60       	ori	r24, 0x08	; 8
  bc:	8a b9       	out	0x0a, r24	; 10
	
	Flipdot_clearBuffer();
  be:	cb df       	rcall	.-106    	; 0x56 <Flipdot_clearBuffer>
  c0:	08 95       	ret

000000c2 <main>:
#include "Flipdot.h"

int main(void){
	Flipdot_init();
  c2:	d9 df       	rcall	.-78     	; 0x76 <Flipdot_init>
  c4:	ff cf       	rjmp	.-2      	; 0xc4 <main+0x2>

000000c6 <_exit>:
  c6:	f8 94       	cli

000000c8 <__stop_program>:
  c8:	ff cf       	rjmp	.-2      	; 0xc8 <__stop_program>
