
Flipdot-lib.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000027c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000024  00800100  00800100  000002f0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002f0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000320  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  00000360  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000cca  00000000  00000000  000003d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000771  00000000  00000000  000010a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000850  00000000  00000000  00001813  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b8  00000000  00000000  00002064  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00007567  00000000  00000000  0000211c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000071a  00000000  00000000  00009683  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00009d9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000023d8  00000000  00000000  00009df5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	38 c0       	rjmp	.+112    	; 0x72 <__ctors_end>
   2:	47 c0       	rjmp	.+142    	; 0x92 <__bad_interrupt>
   4:	46 c0       	rjmp	.+140    	; 0x92 <__bad_interrupt>
   6:	45 c0       	rjmp	.+138    	; 0x92 <__bad_interrupt>
   8:	44 c0       	rjmp	.+136    	; 0x92 <__bad_interrupt>
   a:	43 c0       	rjmp	.+134    	; 0x92 <__bad_interrupt>
   c:	42 c0       	rjmp	.+132    	; 0x92 <__bad_interrupt>
   e:	41 c0       	rjmp	.+130    	; 0x92 <__bad_interrupt>
  10:	40 c0       	rjmp	.+128    	; 0x92 <__bad_interrupt>
  12:	3f c0       	rjmp	.+126    	; 0x92 <__bad_interrupt>
  14:	3e c0       	rjmp	.+124    	; 0x92 <__bad_interrupt>
  16:	3d c0       	rjmp	.+122    	; 0x92 <__bad_interrupt>
  18:	3c c0       	rjmp	.+120    	; 0x92 <__bad_interrupt>
  1a:	3b c0       	rjmp	.+118    	; 0x92 <__bad_interrupt>
  1c:	3a c0       	rjmp	.+116    	; 0x92 <__bad_interrupt>
  1e:	39 c0       	rjmp	.+114    	; 0x92 <__bad_interrupt>
  20:	38 c0       	rjmp	.+112    	; 0x92 <__bad_interrupt>
  22:	37 c0       	rjmp	.+110    	; 0x92 <__bad_interrupt>
  24:	36 c0       	rjmp	.+108    	; 0x92 <__bad_interrupt>
  26:	35 c0       	rjmp	.+106    	; 0x92 <__bad_interrupt>
  28:	34 c0       	rjmp	.+104    	; 0x92 <__bad_interrupt>
  2a:	33 c0       	rjmp	.+102    	; 0x92 <__bad_interrupt>
  2c:	32 c0       	rjmp	.+100    	; 0x92 <__bad_interrupt>
  2e:	31 c0       	rjmp	.+98     	; 0x92 <__bad_interrupt>
  30:	30 c0       	rjmp	.+96     	; 0x92 <__bad_interrupt>
  32:	2f c0       	rjmp	.+94     	; 0x92 <__bad_interrupt>

00000034 <__trampolines_end>:
  34:	07 0c       	add	r0, r7
  36:	0a 03       	fmul	r16, r18
  38:	05 0e       	add	r0, r21
  3a:	09 01       	movw	r0, r18
  3c:	06 0d       	add	r16, r6
  3e:	0b 02       	muls	r16, r27
  40:	04 0f       	add	r16, r20

00000042 <columns>:
  42:	14 34 32 12 10 30 36 16 1b 2b 31 11 1d 2d 35 15     .42..06..+1..-5.
  52:	19 29 33 13 1e 2e 20 08 1a 2a 24 0c 1c 2c 22 0a     .)3... ..*$..,".
  62:	18 28 26 0e 3f 3a 21 09 3b 3c 25 0d 3d 38 23 0b     .(&.?:!.;<%.=8#.

00000072 <__ctors_end>:
  72:	11 24       	eor	r1, r1
  74:	1f be       	out	0x3f, r1	; 63
  76:	cf ef       	ldi	r28, 0xFF	; 255
  78:	d2 e0       	ldi	r29, 0x02	; 2
  7a:	de bf       	out	0x3e, r29	; 62
  7c:	cd bf       	out	0x3d, r28	; 61

0000007e <__do_clear_bss>:
  7e:	21 e0       	ldi	r18, 0x01	; 1
  80:	a0 e0       	ldi	r26, 0x00	; 0
  82:	b1 e0       	ldi	r27, 0x01	; 1
  84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
  86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
  88:	a4 32       	cpi	r26, 0x24	; 36
  8a:	b2 07       	cpc	r27, r18
  8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
  8e:	ee d0       	rcall	.+476    	; 0x26c <main>
  90:	f3 c0       	rjmp	.+486    	; 0x278 <_exit>

00000092 <__bad_interrupt>:
  92:	b6 cf       	rjmp	.-148    	; 0x0 <__vectors>

00000094 <Flipdot_clearBuffer>:
void Flipdot_setBuffer (uint8_t x, uint8_t y, uint8_t state){
  if(x < XMAX && y < YMAX && state <= 1){
	  if(state == 1){
		  f_buffer[x] |= (1<<y);
	  }else if(state == 0){
		  f_buffer[x] &= ~(1<<y);
  94:	80 e0       	ldi	r24, 0x00	; 0
  96:	06 c0       	rjmp	.+12     	; 0xa4 <Flipdot_clearBuffer+0x10>
  98:	e8 2f       	mov	r30, r24
  9a:	f0 e0       	ldi	r31, 0x00	; 0
  9c:	e4 5f       	subi	r30, 0xF4	; 244
  9e:	fe 4f       	sbci	r31, 0xFE	; 254
  a0:	10 82       	st	Z, r1
  a2:	8f 5f       	subi	r24, 0xFF	; 255
  a4:	88 31       	cpi	r24, 0x18	; 24
  a6:	c0 f3       	brcs	.-16     	; 0x98 <Flipdot_clearBuffer+0x4>
  a8:	08 95       	ret

000000aa <Flipdot_init>:
}

void Flipdot_init (void){
	//	I/O pins		NAME			NAME ON BOARD
	
	setBit(DDRB,0);		//A					MCU 2
  aa:	84 b1       	in	r24, 0x04	; 4
  ac:	81 60       	ori	r24, 0x01	; 1
  ae:	84 b9       	out	0x04, r24	; 4
	setBit(DDRB,1);		//B					MCU 3
  b0:	84 b1       	in	r24, 0x04	; 4
  b2:	82 60       	ori	r24, 0x02	; 2
  b4:	84 b9       	out	0x04, r24	; 4
	setBit(DDRB,2);		//C					MCU 4
  b6:	84 b1       	in	r24, 0x04	; 4
  b8:	84 60       	ori	r24, 0x04	; 4
  ba:	84 b9       	out	0x04, r24	; 4
	setBit(DDRB,3);		//Row A				MCU 8
  bc:	84 b1       	in	r24, 0x04	; 4
  be:	88 60       	ori	r24, 0x08	; 8
  c0:	84 b9       	out	0x04, r24	; 4
	setBit(DDRB,4);		//Row B				MCU 9
  c2:	84 b1       	in	r24, 0x04	; 4
  c4:	80 61       	ori	r24, 0x10	; 16
  c6:	84 b9       	out	0x04, r24	; 4
	setBit(DDRB,5);		//Row C				MCU 10
  c8:	84 b1       	in	r24, 0x04	; 4
  ca:	80 62       	ori	r24, 0x20	; 32
  cc:	84 b9       	out	0x04, r24	; 4
	setBit(DDRB,6);		//Subsegment A		MCU 5
  ce:	84 b1       	in	r24, 0x04	; 4
  d0:	80 64       	ori	r24, 0x40	; 64
  d2:	84 b9       	out	0x04, r24	; 4
	setBit(DDRB,7);		//Subsegment B		MCU 6
  d4:	84 b1       	in	r24, 0x04	; 4
  d6:	80 68       	ori	r24, 0x80	; 128
  d8:	84 b9       	out	0x04, r24	; 4
	setBit(DDRD,0);		//Subsegment C		MCU 7
  da:	8a b1       	in	r24, 0x0a	; 10
  dc:	81 60       	ori	r24, 0x01	; 1
  de:	8a b9       	out	0x0a, r24	; 10
	setBit(DDRD,1);		//Segment A			Internal
  e0:	8a b1       	in	r24, 0x0a	; 10
  e2:	82 60       	ori	r24, 0x02	; 2
  e4:	8a b9       	out	0x0a, r24	; 10
	setBit(DDRD,2);		//Segment B			Internal
  e6:	8a b1       	in	r24, 0x0a	; 10
  e8:	84 60       	ori	r24, 0x04	; 4
  ea:	8a b9       	out	0x0a, r24	; 10
	setBit(DDRD,3);		//Segment C			Internal
  ec:	8a b1       	in	r24, 0x0a	; 10
  ee:	88 60       	ori	r24, 0x08	; 8
  f0:	8a b9       	out	0x0a, r24	; 10
	
	Flipdot_clearBuffer();
  f2:	d0 df       	rcall	.-96     	; 0x94 <Flipdot_clearBuffer>
  f4:	08 95       	ret

000000f6 <Flipdot_setData>:
}

void Flipdot_setData (uint8_t x, uint8_t y, uint8_t row, uint8_t column){
	//TODO: Fix references to columns and rows because of PROGMEM!
	f_data[0] = (pgm_read_byte(&rows[y][row]) >> 3) & 1;
  f6:	e6 2f       	mov	r30, r22
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	ee 0f       	add	r30, r30
  fc:	ff 1f       	adc	r31, r31
  fe:	e4 0f       	add	r30, r20
 100:	f1 1d       	adc	r31, r1
 102:	ec 5c       	subi	r30, 0xCC	; 204
 104:	ff 4f       	sbci	r31, 0xFF	; 255
 106:	94 91       	lpm	r25, Z
 108:	a0 e0       	ldi	r26, 0x00	; 0
 10a:	b1 e0       	ldi	r27, 0x01	; 1
 10c:	93 fb       	bst	r25, 3
 10e:	99 27       	eor	r25, r25
 110:	90 f9       	bld	r25, 0
 112:	9c 93       	st	X, r25
	f_data[1] = (pgm_read_byte(&rows[y][row]) >> 2) & 1;
 114:	94 91       	lpm	r25, Z
 116:	92 fb       	bst	r25, 2
 118:	99 27       	eor	r25, r25
 11a:	90 f9       	bld	r25, 0
 11c:	11 96       	adiw	r26, 0x01	; 1
 11e:	9c 93       	st	X, r25
 120:	11 97       	sbiw	r26, 0x01	; 1
	f_data[2] = (pgm_read_byte(&rows[y][row]) >> 1) & 1;
 122:	94 91       	lpm	r25, Z
 124:	96 95       	lsr	r25
 126:	91 70       	andi	r25, 0x01	; 1
 128:	12 96       	adiw	r26, 0x02	; 2
 12a:	9c 93       	st	X, r25
 12c:	12 97       	sbiw	r26, 0x02	; 2
	f_data[3] = (pgm_read_byte(&rows[y][row]) >> 0) & 1;
 12e:	e4 91       	lpm	r30, Z
 130:	e1 70       	andi	r30, 0x01	; 1
 132:	13 96       	adiw	r26, 0x03	; 3
 134:	ec 93       	st	X, r30
 136:	13 97       	sbiw	r26, 0x03	; 3
				 
	f_data[4] = (pgm_read_byte(&columns[x][column]) >> 5) & 1;
 138:	e8 2f       	mov	r30, r24
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	ee 0f       	add	r30, r30
 13e:	ff 1f       	adc	r31, r31
 140:	e2 0f       	add	r30, r18
 142:	f1 1d       	adc	r31, r1
 144:	ee 5b       	subi	r30, 0xBE	; 190
 146:	ff 4f       	sbci	r31, 0xFF	; 255
 148:	84 91       	lpm	r24, Z
 14a:	85 fb       	bst	r24, 5
 14c:	88 27       	eor	r24, r24
 14e:	80 f9       	bld	r24, 0
 150:	14 96       	adiw	r26, 0x04	; 4
 152:	8c 93       	st	X, r24
 154:	14 97       	sbiw	r26, 0x04	; 4
	f_data[5] = (pgm_read_byte(&columns[x][column]) >> 4) & 1;
 156:	84 91       	lpm	r24, Z
 158:	82 95       	swap	r24
 15a:	81 70       	andi	r24, 0x01	; 1
 15c:	15 96       	adiw	r26, 0x05	; 5
 15e:	8c 93       	st	X, r24
 160:	15 97       	sbiw	r26, 0x05	; 5
	f_data[6] = (pgm_read_byte(&columns[x][column]) >> 3) & 1;
 162:	84 91       	lpm	r24, Z
 164:	83 fb       	bst	r24, 3
 166:	88 27       	eor	r24, r24
 168:	80 f9       	bld	r24, 0
 16a:	16 96       	adiw	r26, 0x06	; 6
 16c:	8c 93       	st	X, r24
 16e:	16 97       	sbiw	r26, 0x06	; 6
	f_data[7] = (pgm_read_byte(&columns[x][column]) >> 2) & 1;
 170:	84 91       	lpm	r24, Z
 172:	82 fb       	bst	r24, 2
 174:	88 27       	eor	r24, r24
 176:	80 f9       	bld	r24, 0
 178:	17 96       	adiw	r26, 0x07	; 7
 17a:	8c 93       	st	X, r24
 17c:	17 97       	sbiw	r26, 0x07	; 7
	f_data[8] = (pgm_read_byte(&columns[x][column]) >> 1) & 1;
 17e:	84 91       	lpm	r24, Z
 180:	86 95       	lsr	r24
 182:	81 70       	andi	r24, 0x01	; 1
 184:	18 96       	adiw	r26, 0x08	; 8
 186:	8c 93       	st	X, r24
 188:	18 97       	sbiw	r26, 0x08	; 8
	f_data[9] = (pgm_read_byte(&columns[x][column]) >> 0) & 1;
 18a:	e4 91       	lpm	r30, Z
 18c:	e1 70       	andi	r30, 0x01	; 1
 18e:	19 96       	adiw	r26, 0x09	; 9
 190:	ec 93       	st	X, r30
	asm("break");
 192:	98 95       	break
 194:	08 95       	ret

00000196 <Flipdot_writePixel>:
}

void Flipdot_writePixel (uint8_t x, uint8_t y, uint8_t state){
	if(x < XMAX && y < YMAX && state <= 1){
 196:	88 31       	cpi	r24, 0x18	; 24
 198:	08 f0       	brcs	.+2      	; 0x19c <Flipdot_writePixel+0x6>
 19a:	49 c0       	rjmp	.+146    	; 0x22e <Flipdot_writePixel+0x98>
 19c:	67 30       	cpi	r22, 0x07	; 7
 19e:	08 f0       	brcs	.+2      	; 0x1a2 <Flipdot_writePixel+0xc>
 1a0:	46 c0       	rjmp	.+140    	; 0x22e <Flipdot_writePixel+0x98>
 1a2:	42 30       	cpi	r20, 0x02	; 2
 1a4:	08 f0       	brcs	.+2      	; 0x1a8 <Flipdot_writePixel+0x12>
 1a6:	43 c0       	rjmp	.+134    	; 0x22e <Flipdot_writePixel+0x98>
		uint8_t x_mod = x % 2;
 1a8:	98 2f       	mov	r25, r24
 1aa:	91 70       	andi	r25, 0x01	; 1
		uint8_t y_mod = y % 2;
 1ac:	26 2f       	mov	r18, r22
 1ae:	21 70       	andi	r18, 0x01	; 1
		if(state == 1){
 1b0:	41 30       	cpi	r20, 0x01	; 1
 1b2:	f1 f4       	brne	.+60     	; 0x1f0 <Flipdot_writePixel+0x5a>
			if(!x_mod && !y_mod){
 1b4:	91 11       	cpse	r25, r1
 1b6:	05 c0       	rjmp	.+10     	; 0x1c2 <Flipdot_writePixel+0x2c>
 1b8:	21 11       	cpse	r18, r1
 1ba:	03 c0       	rjmp	.+6      	; 0x1c2 <Flipdot_writePixel+0x2c>
				Flipdot_setData(x,y,0,0);
 1bc:	40 e0       	ldi	r20, 0x00	; 0
 1be:	9b df       	rcall	.-202    	; 0xf6 <Flipdot_setData>
 1c0:	36 c0       	rjmp	.+108    	; 0x22e <Flipdot_writePixel+0x98>
			}else if(!x_mod && y_mod){
 1c2:	91 11       	cpse	r25, r1
 1c4:	06 c0       	rjmp	.+12     	; 0x1d2 <Flipdot_writePixel+0x3c>
 1c6:	22 23       	and	r18, r18
 1c8:	21 f0       	breq	.+8      	; 0x1d2 <Flipdot_writePixel+0x3c>
				Flipdot_setData(x,y,0,1);
 1ca:	21 e0       	ldi	r18, 0x01	; 1
 1cc:	40 e0       	ldi	r20, 0x00	; 0
 1ce:	93 df       	rcall	.-218    	; 0xf6 <Flipdot_setData>
 1d0:	2e c0       	rjmp	.+92     	; 0x22e <Flipdot_writePixel+0x98>
			}else if(x_mod && !y_mod){
 1d2:	99 23       	and	r25, r25
 1d4:	29 f0       	breq	.+10     	; 0x1e0 <Flipdot_writePixel+0x4a>
 1d6:	21 11       	cpse	r18, r1
 1d8:	03 c0       	rjmp	.+6      	; 0x1e0 <Flipdot_writePixel+0x4a>
				Flipdot_setData(x,y,1,0);
 1da:	41 e0       	ldi	r20, 0x01	; 1
 1dc:	8c df       	rcall	.-232    	; 0xf6 <Flipdot_setData>
 1de:	27 c0       	rjmp	.+78     	; 0x22e <Flipdot_writePixel+0x98>
			}else if(x_mod && y_mod){
 1e0:	99 23       	and	r25, r25
 1e2:	29 f1       	breq	.+74     	; 0x22e <Flipdot_writePixel+0x98>
 1e4:	22 23       	and	r18, r18
 1e6:	19 f1       	breq	.+70     	; 0x22e <Flipdot_writePixel+0x98>
				Flipdot_setData(x,y,1,1);
 1e8:	21 e0       	ldi	r18, 0x01	; 1
 1ea:	41 e0       	ldi	r20, 0x01	; 1
 1ec:	84 df       	rcall	.-248    	; 0xf6 <Flipdot_setData>
 1ee:	1f c0       	rjmp	.+62     	; 0x22e <Flipdot_writePixel+0x98>
			}
		}else{
			if(!x_mod && !y_mod){
 1f0:	91 11       	cpse	r25, r1
 1f2:	06 c0       	rjmp	.+12     	; 0x200 <Flipdot_writePixel+0x6a>
 1f4:	21 11       	cpse	r18, r1
 1f6:	04 c0       	rjmp	.+8      	; 0x200 <Flipdot_writePixel+0x6a>
				Flipdot_setData(x,y,1,1);
 1f8:	21 e0       	ldi	r18, 0x01	; 1
 1fa:	41 e0       	ldi	r20, 0x01	; 1
 1fc:	7c df       	rcall	.-264    	; 0xf6 <Flipdot_setData>
 1fe:	17 c0       	rjmp	.+46     	; 0x22e <Flipdot_writePixel+0x98>
				}else if(!x_mod && y_mod){
 200:	91 11       	cpse	r25, r1
 202:	06 c0       	rjmp	.+12     	; 0x210 <Flipdot_writePixel+0x7a>
 204:	22 23       	and	r18, r18
 206:	21 f0       	breq	.+8      	; 0x210 <Flipdot_writePixel+0x7a>
				Flipdot_setData(x,y,1,0);
 208:	20 e0       	ldi	r18, 0x00	; 0
 20a:	41 e0       	ldi	r20, 0x01	; 1
 20c:	74 df       	rcall	.-280    	; 0xf6 <Flipdot_setData>
 20e:	0f c0       	rjmp	.+30     	; 0x22e <Flipdot_writePixel+0x98>
				}else if(x_mod && !y_mod){
 210:	99 23       	and	r25, r25
 212:	31 f0       	breq	.+12     	; 0x220 <Flipdot_writePixel+0x8a>
 214:	21 11       	cpse	r18, r1
 216:	04 c0       	rjmp	.+8      	; 0x220 <Flipdot_writePixel+0x8a>
				Flipdot_setData(x,y,0,1);
 218:	21 e0       	ldi	r18, 0x01	; 1
 21a:	40 e0       	ldi	r20, 0x00	; 0
 21c:	6c df       	rcall	.-296    	; 0xf6 <Flipdot_setData>
 21e:	07 c0       	rjmp	.+14     	; 0x22e <Flipdot_writePixel+0x98>
				}else if(x_mod && y_mod){
 220:	99 23       	and	r25, r25
 222:	29 f0       	breq	.+10     	; 0x22e <Flipdot_writePixel+0x98>
 224:	22 23       	and	r18, r18
 226:	19 f0       	breq	.+6      	; 0x22e <Flipdot_writePixel+0x98>
				Flipdot_setData(x,y,0,0);
 228:	20 e0       	ldi	r18, 0x00	; 0
 22a:	40 e0       	ldi	r20, 0x00	; 0
 22c:	64 df       	rcall	.-312    	; 0xf6 <Flipdot_setData>
	}
	
	//TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO 
	//	I/O pins		NAME			NAME ON BOARD
	
	DDRB |= (1<<0);		//A					MCU 2
 22e:	84 b1       	in	r24, 0x04	; 4
 230:	81 60       	ori	r24, 0x01	; 1
 232:	84 b9       	out	0x04, r24	; 4
	DDRB |= (1<<1);		//B					MCU 3
 234:	84 b1       	in	r24, 0x04	; 4
 236:	82 60       	ori	r24, 0x02	; 2
 238:	84 b9       	out	0x04, r24	; 4
	DDRB |= (1<<2);		//C					MCU 4
 23a:	84 b1       	in	r24, 0x04	; 4
 23c:	84 60       	ori	r24, 0x04	; 4
 23e:	84 b9       	out	0x04, r24	; 4
	DDRB |= (1<<3);		//Row A				MCU 8
 240:	84 b1       	in	r24, 0x04	; 4
 242:	88 60       	ori	r24, 0x08	; 8
 244:	84 b9       	out	0x04, r24	; 4
	DDRB |= (1<<4);		//Row B				MCU 9
 246:	84 b1       	in	r24, 0x04	; 4
 248:	80 61       	ori	r24, 0x10	; 16
 24a:	84 b9       	out	0x04, r24	; 4
	DDRB |= (1<<5);		//Row C				MCU 10
 24c:	84 b1       	in	r24, 0x04	; 4
 24e:	80 62       	ori	r24, 0x20	; 32
 250:	84 b9       	out	0x04, r24	; 4
	DDRB |= (1<<6);		//Subsegment A		MCU 5
 252:	84 b1       	in	r24, 0x04	; 4
 254:	80 64       	ori	r24, 0x40	; 64
 256:	84 b9       	out	0x04, r24	; 4
	DDRB |= (1<<7);		//Subsegment B		MCU 6
 258:	84 b1       	in	r24, 0x04	; 4
 25a:	80 68       	ori	r24, 0x80	; 128
 25c:	84 b9       	out	0x04, r24	; 4
	DDRD |= (1<<0);		//Subsegment C		MCU 7
 25e:	8a b1       	in	r24, 0x0a	; 10
 260:	81 60       	ori	r24, 0x01	; 1
 262:	8a b9       	out	0x0a, r24	; 10
	DDRD |= (1<<1);		//Segment A			Internal
 264:	8a b1       	in	r24, 0x0a	; 10
 266:	82 60       	ori	r24, 0x02	; 2
 268:	8a b9       	out	0x0a, r24	; 10
 26a:	08 95       	ret

0000026c <main>:
#include "Flipdot.h"

int main(void){
	Flipdot_init();
 26c:	1e df       	rcall	.-452    	; 0xaa <Flipdot_init>
	Flipdot_writePixel(1,0,1);
 26e:	41 e0       	ldi	r20, 0x01	; 1
 270:	60 e0       	ldi	r22, 0x00	; 0
 272:	81 e0       	ldi	r24, 0x01	; 1
 274:	90 df       	rcall	.-224    	; 0x196 <Flipdot_writePixel>
 276:	ff cf       	rjmp	.-2      	; 0x276 <main+0xa>

00000278 <_exit>:
 278:	f8 94       	cli

0000027a <__stop_program>:
 27a:	ff cf       	rjmp	.-2      	; 0x27a <__stop_program>
